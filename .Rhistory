Pros.GCurve$TimeFrame <- round(Pros.GCurve$TimeFrame,-2)
Pros.GCurve <- summaryBy(Inst+TA+DA+DI~TimeFrame+Cond+Name+Pop+ ItemNo, data = Pros.GCurve, FUN = c(mean),keep.names = T)
Pros.GCurve$Inst <- ifelse(Pros.GCurve$Inst > 0,1,0)
t<-poly(unique(Pros.GCurve$TimeFrame),2)
time<-as.vector(unique(Pros.GCurve$TimeFrame))
t<-cbind(t,time)
t<-as.data.frame(t)
Pros.GCurve<-Pros.GCurve[order(Pros.GCurve$TimeFrame),]
Pros.GCurve$t1<-NA
Pros.GCurve$t2<-NA
for (i in (1:nrow(Pros.GCurve))){
Pros.GCurve$t1[i]<-t[t$time==Pros.GCurve$TimeFrame[i],1]
Pros.GCurve$t2[i]<-t[t$time==Pros.GCurve$TimeFrame[i],2]
}
contrasts(Pros.GCurve$Cond)[1] <- -1
contrasts(Pros.GCurve$Pop)[1] <- -1
pros.gc.brm <- brm(Inst ~1+(t1+t2)*Pop*Cond+(0+(t1+t2)*Cond||Name) + (1+(t1+t2)*Pop*Cond||ItemNo), data=Pros.GCurve, family = "bernoulli", chains = 3, iter = 1000, warmup = 600,prior=c(set_prior ("student_t (4,0, 1)")))
print(pros.gc.brm)
Pros.GCurve$fitted <-  fitted(pros.gc.brm)
ggplot(Pros.GCurve,aes(TimeFrame,Inst,linetype = Cond)) + facet_wrap(~Pop) + stat_summary(aes(y=fitted[,1]), fun.y=mean, geom="line")+coord_cartesian(ylim=c(0,0.6))+ theme_minimal()+ theme(legend.title=element_blank(),legend.position="bottom", legend.background = element_rect(colour = "white"), strip.background = element_rect(colour = "white"),  text = element_text(size = 16, colour = "black", angle = 0), strip.text.y = element_text(size = 12, colour = "black", angle = 0))+labs(x = "Time (ms)",y = "Proportion of Trials with Looks to Target Instrument")+geom_point(data = Pros.GCurve.Points, cex = 1, colour = "black", aes(shape = Cond))
setwd("~/Dropbox/Studies/Schizophrenia/SchizFeb2015Analysis")
source("ET_Scripts_Feb2015/ET_Import.r")
source("ET_Scripts_Feb2015/proc_subj.r")
library(reshape2)
library(plyr)
library(car)
require(gdata)
require(ggplot2)
require(longitudinalData)
library(lme4)
# QUD Processing scripts
o1l1 = read.csv("./QUDData/EyeCoding/SubjData/O1L1.csv",header = T)
o1l2 = read.csv("./QUDData/EyeCoding/SubjData/O1L2.csv",header = T)
o2l1 = read.csv("./QUDData/EyeCoding/SubjData/O2L1.csv",header = T)
o2l2 = read.csv("./QUDData/EyeCoding/SubjData/O2L2.csv",header = T)
PlaceCodes = read.csv("./QUDData/EyeCoding/SubjData/PlaceCodes.csv",header =  T)
#AC_40s <- read.csv("./QUDData/EyeCoding/SubjData/AC_41Place.csv", header = T)
QUD.AC = ET_Import.NoExpand("./QUDData/EyeCoding/SubjData/3.s-CSVs/AC",o1l1,o1l2,o2l1,o2l2,PlaceCodes)
QUD.AC$Pop = "AC"
QUD.SC = ET_Import.NoExpand("./QUDData/EyeCoding/SubjData/3.s-CSVs/SC",o1l1,o1l2,o2l1,o2l2,PlaceCodes)
QUD.SC$Pop = "SC"
QUD = rbind(QUD.AC,QUD.SC)
QUD$Pop = as.factor(QUD$Pop)
contrasts(QUD$Pop)[1] <- -1
QUD$Cond = as.factor(QUD$Cond)
contrasts(QUD$Cond)[1] <- -1
#Subjects AC_42,AC_43, AC_44 were tested with their object positions mirror reversed
QUD[QUD$Name %in% c("AC_42","AC_43","AC_44"),c("UL","UR")] <- QUD[QUD$Name %in% c("AC_42","AC_43","AC_44"),c("UR","UL")]
QUD[QUD$Name %in% c("AC_42","AC_43","AC_44"),c("LL","LR")] <- QUD[QUD$Name %in% c("AC_42","AC_43","AC_44"),c("LR","LL")]
# Placement correction
QUD[QUD$Name == "SC_02" & QUD$ItemNo == "T5",]$UL = "TA"
QUD[QUD$Name == "SC_02" & QUD$ItemNo == "T5",]$UR = "TI"
QUD[QUD$Name == "SC_02" & QUD$ItemNo == "T5",]$Code = ifelse(QUD[QUD$Name == "SC_02" & QUD$ItemNo == "T5",]$Code == "TA","TI",ifelse(QUD[QUD$Name == "SC_02" & QUD$ItemNo == "T5",]$Code == "TI","TA",QUD[QUD$Name == "SC_02" & QUD$ItemNo == "T5",]$Code))
QUD[QUD$Marker.Name == "UL",]$Code = as.character(QUD[QUD$Marker.Name == "UL",]$UL)
QUD[QUD$Marker.Name == "UR",]$Code = as.character(QUD[QUD$Marker.Name == "UR",]$UR)
QUD[QUD$Marker.Name == "LL",]$Code = as.character(QUD[QUD$Marker.Name == "LL",]$LL)
QUD[QUD$Marker.Name == "LR",]$Code = as.character(QUD[QUD$Marker.Name == "LR",]$LR)
QUD$Inst = 0
if (length(QUD[QUD$Code == "TI",]$Inst>0)){QUD[QUD$Code == "TI",]$Inst = 1}
QUD$TA = 0
if (length(QUD[QUD$Code == "TA",]$TA>0)){QUD[QUD$Code == "TA",]$TA =  1}
QUD$DI = 0
if (length(QUD[QUD$Code == "DI",]$DI>0)){QUD[QUD$Code == "DI",]$DI = 1}
QUD$DA = 0
if (length(QUD[QUD$Code == "DA",]$DA > 0)){QUD[QUD$Code == "DA",]$DA = 1}
QUD = QUD[QUD$Name %in% c( "AC_16",
"AC_17",
"AC_18",
"AC_19",
"AC_20",
"AC_21",
"AC_23",
"AC_24",
"AC_26",
"AC_27",
"AC_29",
"AC_30",
"AC_33",
"AC_34",
"AC_37",
"AC_39",
"AC_40",
"AC_41",
"AC_32",
"AC_43",
"AC_44",
"AC_45",
"AC_46",
"AC_36","SC_02","SC_03","SC_04","SC_05","SC_06","SC_07","SC_08","SC_09","SC_10","SC_11","SC_12","SC_13","SC_14","SC_15","SC_16","SC_17","SC_18","SC_19","SC_20","SC_21","SC_22","SC_23","SC_24","SC_25"),]
QUD$NameTrial = paste(QUD$Name,QUD$Trial, sep = "")
QUD$Name <- QUD$Name[drop=TRUE]
QUD$ExOrd = 1
QUD[QUD$Name %in% c
("AC_32","AC_33","AC_34","AC_36","AC_37","AC_38","AC_39","AC_40","AC_41","AC_42","AC_43","AC_44","AC_45","AC_46","AC_47","SC_14","SC_15","SC_16","SC_17","SC_18","SC_19","SC_20","SC_21","SC_22","SC_23","SC_24","SC_25"),]$ExOrd = 2
QUD$ExOrd = as.factor(QUD$ExOrd)
contrasts(QUD$ExOrd)[1] <- -1
ddply(QUD, .(Name,ItemNo,Cond,Pop,Verb,Prep,NP2,PrepFrame,NP2Frame), plyr::summarize, TimeFrame = c(0:max(TimeFrame))) -> QUD.Expand
QUD.Expand <- merge(QUD,QUD.Expand, by = c("Name","ItemNo","Cond","Pop","TimeFrame","Verb","Prep","NP2","PrepFrame","NP2Frame"), all= TRUE)
QUD.Expand$Inst <- t(imputation(matrix(QUD.Expand$Inst, nrow = 1),method = "locf"))
QUD.Expand$TA <- t(imputation(matrix(QUD.Expand$TA, nrow = 1),method = "locf"))
QUD.Expand$DA <- t(imputation(matrix(QUD.Expand$DA, nrow = 1),method = "locf"))
QUD.Expand$DI <- t(imputation(matrix(QUD.Expand$DI, nrow = 1),method = "locf"))
QUD.Expand <- ddply(QUD.Expand, .(Name,ItemNo), transform, Period = ifelse(TimeFrame >= NP2Frame,"NP2",ifelse(TimeFrame >= PrepFrame,"Prep","Verb")))
QUD.Expand <- ddply(QUD.Expand, .(Name,ItemNo), transform, TimeFrame = TimeFrame - NP2Frame)
QUD.Expand$TimeFrame <- QUD.Expand$TimeFrame* (1000/30)
se <- function(x){
x <- sd(x)/sqrt(24)
return(x)
}
QUD.GCurve <- summaryBy(Inst+TA+DA+DI~TimeFrame+Cond+Name+Pop, data = QUD.Expand[QUD.Expand$TimeFrame >= 0 & QUD.Expand$TimeFrame <=1200,], FUN = c(mean),keep.names = T)
QUD.GCurve$TimeFrame <- round(QUD.GCurve$TimeFrame,-2)
t<-poly(unique(QUD.GCurve$TimeFrame),2)
time<-as.vector(unique(QUD.GCurve$TimeFrame))
t<-cbind(t,time)
t<-as.data.frame(t)
QUD.GCurve<-QUD.GCurve[order(QUD.GCurve$TimeFrame),]
QUD.GCurve$t1<-NA
QUD.GCurve$t2<-NA
for (i in (1:nrow(QUD.GCurve))){
QUD.GCurve$t1[i]<-t[t$time==QUD.GCurve$TimeFrame[i],1]
QUD.GCurve$t2[i]<-t[t$time==QUD.GCurve$TimeFrame[i],2]
}
contrasts(QUD.GCurve$Cond)[1] <- -1
contrasts(QUD.GCurve$Pop)[1] <- -1
qud.gc <- lmer(Inst ~1+(t1+t2)*Pop*Cond+(1+t1+t2+Cond||Name), data=QUD.GCurve)
summary(qud.gc)
source("ET_Scripts_Feb2015/ET_Import.r")
source("ET_Scripts_Feb2015/proc_subj.r")
library(reshape2)
library(plyr)
library(car)
require(gdata)
require(ggplot2)
require(longitudinalData)
library(lme4)
# QUD Processing scripts
o1l1 = read.csv("./QUDData/EyeCoding/SubjData/O1L1.csv",header = T)
o1l2 = read.csv("./QUDData/EyeCoding/SubjData/O1L2.csv",header = T)
o2l1 = read.csv("./QUDData/EyeCoding/SubjData/O2L1.csv",header = T)
o2l2 = read.csv("./QUDData/EyeCoding/SubjData/O2L2.csv",header = T)
PlaceCodes = read.csv("./QUDData/EyeCoding/SubjData/PlaceCodes.csv",header =  T)
#AC_40s <- read.csv("./QUDData/EyeCoding/SubjData/AC_41Place.csv", header = T)
QUD.AC = ET_Import.NoExpand("./QUDData/EyeCoding/SubjData/3.s-CSVs/AC",o1l1,o1l2,o2l1,o2l2,PlaceCodes)
QUD.AC$Pop = "AC"
QUD.SC = ET_Import.NoExpand("./QUDData/EyeCoding/SubjData/3.s-CSVs/SC",o1l1,o1l2,o2l1,o2l2,PlaceCodes)
QUD.SC$Pop = "SC"
QUD = rbind(QUD.AC,QUD.SC)
QUD$Pop = as.factor(QUD$Pop)
contrasts(QUD$Pop)[1] <- -1
QUD$Cond = as.factor(QUD$Cond)
contrasts(QUD$Cond)[1] <- -1
#Subjects AC_42,AC_43, AC_44 were tested with their object positions mirror reversed
QUD[QUD$Name %in% c("AC_42","AC_43","AC_44"),c("UL","UR")] <- QUD[QUD$Name %in% c("AC_42","AC_43","AC_44"),c("UR","UL")]
QUD[QUD$Name %in% c("AC_42","AC_43","AC_44"),c("LL","LR")] <- QUD[QUD$Name %in% c("AC_42","AC_43","AC_44"),c("LR","LL")]
# Placement correction
QUD[QUD$Name == "SC_02" & QUD$ItemNo == "T5",]$UL = "TA"
QUD[QUD$Name == "SC_02" & QUD$ItemNo == "T5",]$UR = "TI"
QUD[QUD$Name == "SC_02" & QUD$ItemNo == "T5",]$Code = ifelse(QUD[QUD$Name == "SC_02" & QUD$ItemNo == "T5",]$Code == "TA","TI",ifelse(QUD[QUD$Name == "SC_02" & QUD$ItemNo == "T5",]$Code == "TI","TA",QUD[QUD$Name == "SC_02" & QUD$ItemNo == "T5",]$Code))
QUD[QUD$Marker.Name == "UL",]$Code = as.character(QUD[QUD$Marker.Name == "UL",]$UL)
QUD[QUD$Marker.Name == "UR",]$Code = as.character(QUD[QUD$Marker.Name == "UR",]$UR)
QUD[QUD$Marker.Name == "LL",]$Code = as.character(QUD[QUD$Marker.Name == "LL",]$LL)
QUD[QUD$Marker.Name == "LR",]$Code = as.character(QUD[QUD$Marker.Name == "LR",]$LR)
QUD$Inst = 0
if (length(QUD[QUD$Code == "TI",]$Inst>0)){QUD[QUD$Code == "TI",]$Inst = 1}
QUD$TA = 0
if (length(QUD[QUD$Code == "TA",]$TA>0)){QUD[QUD$Code == "TA",]$TA =  1}
QUD$DI = 0
if (length(QUD[QUD$Code == "DI",]$DI>0)){QUD[QUD$Code == "DI",]$DI = 1}
QUD$DA = 0
if (length(QUD[QUD$Code == "DA",]$DA > 0)){QUD[QUD$Code == "DA",]$DA = 1}
QUD = QUD[QUD$Name %in% c( "AC_16",
"AC_17",
"AC_18",
"AC_19",
"AC_20",
"AC_21",
"AC_23",
"AC_24",
"AC_26",
"AC_27",
"AC_29",
"AC_30",
"AC_33",
"AC_34",
"AC_37",
"AC_39",
"AC_40",
"AC_41",
"AC_32",
"AC_43",
"AC_44",
"AC_45",
"AC_46",
"AC_36","SC_02","SC_03","SC_04","SC_05","SC_06","SC_07","SC_08","SC_09","SC_10","SC_11","SC_12","SC_13","SC_14","SC_15","SC_16","SC_17","SC_18","SC_19","SC_20","SC_21","SC_22","SC_23","SC_24","SC_25"),]
QUD$NameTrial = paste(QUD$Name,QUD$Trial, sep = "")
QUD$Name <- QUD$Name[drop=TRUE]
QUD$ExOrd = 1
QUD[QUD$Name %in% c
("AC_32","AC_33","AC_34","AC_36","AC_37","AC_38","AC_39","AC_40","AC_41","AC_42","AC_43","AC_44","AC_45","AC_46","AC_47","SC_14","SC_15","SC_16","SC_17","SC_18","SC_19","SC_20","SC_21","SC_22","SC_23","SC_24","SC_25"),]$ExOrd = 2
QUD$ExOrd = as.factor(QUD$ExOrd)
contrasts(QUD$ExOrd)[1] <- -1
ddply(QUD, .(Name,ItemNo,Cond,Pop,Verb,Prep,NP2,PrepFrame,NP2Frame), plyr::summarize, TimeFrame = c(0:max(TimeFrame))) -> QUD.Expand
QUD.Expand <- merge(QUD,QUD.Expand, by = c("Name","ItemNo","Cond","Pop","TimeFrame","Verb","Prep","NP2","PrepFrame","NP2Frame"), all= TRUE)
QUD.Expand$Inst <- t(imputation(matrix(QUD.Expand$Inst, nrow = 1),method = "locf"))
QUD.Expand$TA <- t(imputation(matrix(QUD.Expand$TA, nrow = 1),method = "locf"))
QUD.Expand$DA <- t(imputation(matrix(QUD.Expand$DA, nrow = 1),method = "locf"))
QUD.Expand$DI <- t(imputation(matrix(QUD.Expand$DI, nrow = 1),method = "locf"))
QUD.Expand <- ddply(QUD.Expand, .(Name,ItemNo), transform, Period = ifelse(TimeFrame >= NP2Frame,"NP2",ifelse(TimeFrame >= PrepFrame,"Prep","Verb")))
QUD.Expand <- ddply(QUD.Expand, .(Name,ItemNo), transform, TimeFrame = TimeFrame - NP2Frame)
QUD.Expand$TimeFrame <- QUD.Expand$TimeFrame* (1000/30)
se <- function(x){
x <- sd(x)/sqrt(24)
return(x)
}
QUD.GCurve <- summaryBy(Inst+TA+DA+DI~TimeFrame+Cond+Name+Pop, data = QUD.Expand[QUD.Expand$TimeFrame >= 0 & QUD.Expand$TimeFrame <=1200,], FUN = c(mean),keep.names = T)
QUD.GCurve$TimeFrame <- round(QUD.GCurve$TimeFrame,-2)
QUD.GCurve <- summaryBy(Inst+TA+DA+DI~TimeFrame+Cond+Name+Pop, data = QUD.GCurve, FUN = c(mean),keep.names = T)
t<-poly(unique(QUD.GCurve$TimeFrame),2)
time<-as.vector(unique(QUD.GCurve$TimeFrame))
t<-cbind(t,time)
t<-as.data.frame(t)
QUD.GCurve<-QUD.GCurve[order(QUD.GCurve$TimeFrame),]
QUD.GCurve$t1<-NA
QUD.GCurve$t2<-NA
for (i in (1:nrow(QUD.GCurve))){
QUD.GCurve$t1[i]<-t[t$time==QUD.GCurve$TimeFrame[i],1]
QUD.GCurve$t2[i]<-t[t$time==QUD.GCurve$TimeFrame[i],2]
}
contrasts(QUD.GCurve$Cond)[1] <- -1
contrasts(QUD.GCurve$Pop)[1] <- -1
qud.gc <- lmer(Inst ~1+(t1+t2)*Pop*Cond+(1+t1+t2+Cond||Name), data=QUD.GCurve)
summary(qud.gc)
source("ET_Scripts_Feb2015/ET_Import.r")
source("ET_Scripts_Feb2015/proc_subj.r")
library(reshape2)
library(plyr)
library(car)
require(gdata)
require(ggplot2)
require(longitudinalData)
library(lme4)
# QUD Processing scripts
o1l1 = read.csv("./QUDData/EyeCoding/SubjData/O1L1.csv",header = T)
o1l2 = read.csv("./QUDData/EyeCoding/SubjData/O1L2.csv",header = T)
o2l1 = read.csv("./QUDData/EyeCoding/SubjData/O2L1.csv",header = T)
o2l2 = read.csv("./QUDData/EyeCoding/SubjData/O2L2.csv",header = T)
PlaceCodes = read.csv("./QUDData/EyeCoding/SubjData/PlaceCodes.csv",header =  T)
#AC_40s <- read.csv("./QUDData/EyeCoding/SubjData/AC_41Place.csv", header = T)
QUD.AC = ET_Import.NoExpand("./QUDData/EyeCoding/SubjData/3.s-CSVs/AC",o1l1,o1l2,o2l1,o2l2,PlaceCodes)
QUD.AC$Pop = "AC"
QUD.SC = ET_Import.NoExpand("./QUDData/EyeCoding/SubjData/3.s-CSVs/SC",o1l1,o1l2,o2l1,o2l2,PlaceCodes)
QUD.SC$Pop = "SC"
QUD = rbind(QUD.AC,QUD.SC)
QUD$Pop = as.factor(QUD$Pop)
contrasts(QUD$Pop)[1] <- -1
QUD$Cond = as.factor(QUD$Cond)
contrasts(QUD$Cond)[1] <- -1
#Subjects AC_42,AC_43, AC_44 were tested with their object positions mirror reversed
QUD[QUD$Name %in% c("AC_42","AC_43","AC_44"),c("UL","UR")] <- QUD[QUD$Name %in% c("AC_42","AC_43","AC_44"),c("UR","UL")]
QUD[QUD$Name %in% c("AC_42","AC_43","AC_44"),c("LL","LR")] <- QUD[QUD$Name %in% c("AC_42","AC_43","AC_44"),c("LR","LL")]
# Placement correction
QUD[QUD$Name == "SC_02" & QUD$ItemNo == "T5",]$UL = "TA"
QUD[QUD$Name == "SC_02" & QUD$ItemNo == "T5",]$UR = "TI"
QUD[QUD$Name == "SC_02" & QUD$ItemNo == "T5",]$Code = ifelse(QUD[QUD$Name == "SC_02" & QUD$ItemNo == "T5",]$Code == "TA","TI",ifelse(QUD[QUD$Name == "SC_02" & QUD$ItemNo == "T5",]$Code == "TI","TA",QUD[QUD$Name == "SC_02" & QUD$ItemNo == "T5",]$Code))
QUD[QUD$Marker.Name == "UL",]$Code = as.character(QUD[QUD$Marker.Name == "UL",]$UL)
QUD[QUD$Marker.Name == "UR",]$Code = as.character(QUD[QUD$Marker.Name == "UR",]$UR)
QUD[QUD$Marker.Name == "LL",]$Code = as.character(QUD[QUD$Marker.Name == "LL",]$LL)
QUD[QUD$Marker.Name == "LR",]$Code = as.character(QUD[QUD$Marker.Name == "LR",]$LR)
QUD$Inst = 0
if (length(QUD[QUD$Code == "TI",]$Inst>0)){QUD[QUD$Code == "TI",]$Inst = 1}
QUD$TA = 0
if (length(QUD[QUD$Code == "TA",]$TA>0)){QUD[QUD$Code == "TA",]$TA =  1}
QUD$DI = 0
if (length(QUD[QUD$Code == "DI",]$DI>0)){QUD[QUD$Code == "DI",]$DI = 1}
QUD$DA = 0
if (length(QUD[QUD$Code == "DA",]$DA > 0)){QUD[QUD$Code == "DA",]$DA = 1}
QUD = QUD[QUD$Name %in% c( "AC_16",
"AC_17",
"AC_18",
"AC_19",
"AC_20",
"AC_21",
"AC_23",
"AC_24",
"AC_26",
"AC_27",
"AC_29",
"AC_30",
"AC_33",
"AC_34",
"AC_37",
"AC_39",
"AC_40",
"AC_41",
"AC_32",
"AC_43",
"AC_44",
"AC_45",
"AC_46",
"AC_36","SC_02","SC_03","SC_04","SC_05","SC_06","SC_07","SC_08","SC_09","SC_10","SC_11","SC_12","SC_13","SC_14","SC_15","SC_16","SC_17","SC_18","SC_19","SC_20","SC_21","SC_22","SC_23","SC_24","SC_25"),]
QUD$NameTrial = paste(QUD$Name,QUD$Trial, sep = "")
QUD$Name <- QUD$Name[drop=TRUE]
QUD$ExOrd = 1
QUD[QUD$Name %in% c
("AC_32","AC_33","AC_34","AC_36","AC_37","AC_38","AC_39","AC_40","AC_41","AC_42","AC_43","AC_44","AC_45","AC_46","AC_47","SC_14","SC_15","SC_16","SC_17","SC_18","SC_19","SC_20","SC_21","SC_22","SC_23","SC_24","SC_25"),]$ExOrd = 2
QUD$ExOrd = as.factor(QUD$ExOrd)
contrasts(QUD$ExOrd)[1] <- -1
ddply(QUD, .(Name,ItemNo,Cond,Pop,Verb,Prep,NP2,PrepFrame,NP2Frame), plyr::summarize, TimeFrame = c(0:max(TimeFrame))) -> QUD.Expand
QUD.Expand <- merge(QUD,QUD.Expand, by = c("Name","ItemNo","Cond","Pop","TimeFrame","Verb","Prep","NP2","PrepFrame","NP2Frame"), all= TRUE)
QUD.Expand$Inst <- t(imputation(matrix(QUD.Expand$Inst, nrow = 1),method = "locf"))
QUD.Expand$TA <- t(imputation(matrix(QUD.Expand$TA, nrow = 1),method = "locf"))
QUD.Expand$DA <- t(imputation(matrix(QUD.Expand$DA, nrow = 1),method = "locf"))
QUD.Expand$DI <- t(imputation(matrix(QUD.Expand$DI, nrow = 1),method = "locf"))
QUD.Expand <- ddply(QUD.Expand, .(Name,ItemNo), transform, Period = ifelse(TimeFrame >= NP2Frame,"NP2",ifelse(TimeFrame >= PrepFrame,"Prep","Verb")))
QUD.Expand <- ddply(QUD.Expand, .(Name,ItemNo), transform, TimeFrame = TimeFrame - NP2Frame)
QUD.Expand$TimeFrame <- QUD.Expand$TimeFrame* (1000/30)
se <- function(x){
x <- sd(x)/sqrt(24)
return(x)
}
QUD.GCurve <- summaryBy(Inst+TA+DA+DI~TimeFrame+Cond+Name+Pop+ItemNo, data = QUD.Expand[QUD.Expand$TimeFrame >= 0 & QUD.Expand$TimeFrame <=1200,], FUN = c(mean),keep.names = T)
QUD.GCurve$TimeFrame <- round(QUD.GCurve$TimeFrame,-2)
QUD.GCurve <- summaryBy(Inst+TA+DA+DI~TimeFrame+Cond+Name+Pop+ItemNo, data = QUD.GCurve, FUN = c(mean),keep.names = T)
QUD.GCurve$Inst <- ifelse(QUD.GCurve$Inst > 0,1,0)
t<-poly(unique(QUD.GCurve$TimeFrame),2)
time<-as.vector(unique(QUD.GCurve$TimeFrame))
t<-cbind(t,time)
t<-as.data.frame(t)
QUD.GCurve<-QUD.GCurve[order(QUD.GCurve$TimeFrame),]
QUD.GCurve$t1<-NA
QUD.GCurve$t2<-NA
for (i in (1:nrow(QUD.GCurve))){
QUD.GCurve$t1[i]<-t[t$time==QUD.GCurve$TimeFrame[i],1]
QUD.GCurve$t2[i]<-t[t$time==QUD.GCurve$TimeFrame[i],2]
}
contrasts(QUD.GCurve$Cond)[1] <- -1
contrasts(QUD.GCurve$Pop)[1] <- -1
qud.gc <- lmer(Inst ~1+(t1+t2)*Pop*Cond+(1+t1+t2+Cond||Name), data=QUD.GCurve)
head(subset(QUD.GCurve, Item == "T1"))
summary(QUD.GCurve)
QUD.GCurve[1:10,]
QUD.GCurve[11:20,]
head(subset(QUD.GCurve, Name == "AC_18" & ItemNo == "T1"))
qud.gc.brm.full <- brm(Inst ~1+(t1+t2)*Pop*Cond+(0+(t1+t2)*Cond||Name) + (1+(t1+t2)*Pop*Cond||ItemNo), data=QUD.GCurve, family = "bernoulli", chains = 3, iter = 1000, warmup = 600,prior=c(set_prior ("student_t (4,0, 1)")))
summary(qud.gc.brm.full)
QUD.GCurve <- summaryBy(Inst+TA+DA+DI~TimeFrame+Cond+Name+Pop, data = QUD.Expand[QUD.Expand$TimeFrame >= 0 & QUD.Expand$TimeFrame <=1200,], FUN = c(mean),keep.names = T)
QUD.GCurve <- summaryBy(Inst+TA+DA+DI~TimeFrame+Cond+Name+Pop + ItemNo, data = QUD.Expand[QUD.Expand$TimeFrame >= 0 & QUD.Expand$TimeFrame <=1200,], FUN = c(mean),keep.names = T)
QUD.GCurve$Inst <- ifelse(QUD.GCurve$Inst > 0,1,0)
t<-poly(unique(QUD.GCurve$TimeFrame),2)
time<-as.vector(unique(QUD.GCurve$TimeFrame))
t<-cbind(t,time)
t<-as.data.frame(t)
QUD.GCurve<-QUD.GCurve[order(QUD.GCurve$TimeFrame),]
QUD.GCurve$t1<-NA
QUD.GCurve$t2<-NA
for (i in (1:nrow(QUD.GCurve))){
QUD.GCurve$t1[i]<-t[t$time==QUD.GCurve$TimeFrame[i],1]
QUD.GCurve$t2[i]<-t[t$time==QUD.GCurve$TimeFrame[i],2]
}
contrasts(QUD.GCurve$Cond)[1] <- -1
contrasts(QUD.GCurve$Pop)[1] <- -1
qud.gc.brm.full <- brm(Inst ~1+(t1+t2)*Pop*Cond+(0+(t1+t2)*Cond||Name) + (1+(t1+t2)*Pop*Cond||ItemNo), data=QUD.GCurve, family = "bernoulli", chains = 3, iter = 1000, warmup = 600,prior=c(set_prior ("student_t (4,0, 1)")))
summary(qud.gc.brm.full)
qud.gc.brm.full <- brm(Inst ~1+(t1+t2)*Pop*Cond+(0+(t1+t2)*Cond||Name) + (1+(t1+t2)*Pop*Cond||ItemNo), data=QUD.GCurve, family = "bernoulli", chains = 3, iter = 1000, warmup = 600,prior=c(set_prior ("student_t (6,0, 0.5)")))
summary(qud.gc.brm.full)
qud.gc.brm.full <- brm(Inst ~1+(t1+t2)*Pop*Cond+(0+(t1+t2)*Cond|Name) + (1+(t1+t2)*Pop*Cond|ItemNo), data=QUD.GCurve, family = "bernoulli", chains = 3, iter = 1000, warmup = 600,prior=c(set_prior ("student_t (6,0, 0.5)")))
summary(qud.gc.brm.full)
source("ET_Scripts_Feb2015/ET_Import.r")
source("ET_Scripts_Feb2015/proc_subj.r")
library(reshape2)
library(plyr)
library(car)
require(gdata)
require(ggplot2)
require(longitudinalData)
library(lme4)
# QUD Processing scripts
o1l1 = read.csv("./QUDData/EyeCoding/SubjData/O1L1.csv",header = T)
o1l2 = read.csv("./QUDData/EyeCoding/SubjData/O1L2.csv",header = T)
o2l1 = read.csv("./QUDData/EyeCoding/SubjData/O2L1.csv",header = T)
o2l2 = read.csv("./QUDData/EyeCoding/SubjData/O2L2.csv",header = T)
PlaceCodes = read.csv("./QUDData/EyeCoding/SubjData/PlaceCodes.csv",header =  T)
#AC_40s <- read.csv("./QUDData/EyeCoding/SubjData/AC_41Place.csv", header = T)
QUD.AC = ET_Import.NoExpand("./QUDData/EyeCoding/SubjData/3.s-CSVs/AC",o1l1,o1l2,o2l1,o2l2,PlaceCodes)
QUD.AC$Pop = "AC"
QUD.SC = ET_Import.NoExpand("./QUDData/EyeCoding/SubjData/3.s-CSVs/SC",o1l1,o1l2,o2l1,o2l2,PlaceCodes)
QUD.SC$Pop = "SC"
QUD = rbind(QUD.AC,QUD.SC)
QUD$Pop = as.factor(QUD$Pop)
contrasts(QUD$Pop)[1] <- -1
QUD$Cond = as.factor(QUD$Cond)
contrasts(QUD$Cond)[1] <- -1
#Subjects AC_42,AC_43, AC_44 were tested with their object positions mirror reversed
QUD[QUD$Name %in% c("AC_42","AC_43","AC_44"),c("UL","UR")] <- QUD[QUD$Name %in% c("AC_42","AC_43","AC_44"),c("UR","UL")]
QUD[QUD$Name %in% c("AC_42","AC_43","AC_44"),c("LL","LR")] <- QUD[QUD$Name %in% c("AC_42","AC_43","AC_44"),c("LR","LL")]
# Placement correction
QUD[QUD$Name == "SC_02" & QUD$ItemNo == "T5",]$UL = "TA"
QUD[QUD$Name == "SC_02" & QUD$ItemNo == "T5",]$UR = "TI"
QUD[QUD$Name == "SC_02" & QUD$ItemNo == "T5",]$Code = ifelse(QUD[QUD$Name == "SC_02" & QUD$ItemNo == "T5",]$Code == "TA","TI",ifelse(QUD[QUD$Name == "SC_02" & QUD$ItemNo == "T5",]$Code == "TI","TA",QUD[QUD$Name == "SC_02" & QUD$ItemNo == "T5",]$Code))
QUD[QUD$Marker.Name == "UL",]$Code = as.character(QUD[QUD$Marker.Name == "UL",]$UL)
QUD[QUD$Marker.Name == "UR",]$Code = as.character(QUD[QUD$Marker.Name == "UR",]$UR)
QUD[QUD$Marker.Name == "LL",]$Code = as.character(QUD[QUD$Marker.Name == "LL",]$LL)
QUD[QUD$Marker.Name == "LR",]$Code = as.character(QUD[QUD$Marker.Name == "LR",]$LR)
QUD$Inst = 0
if (length(QUD[QUD$Code == "TI",]$Inst>0)){QUD[QUD$Code == "TI",]$Inst = 1}
QUD$TA = 0
if (length(QUD[QUD$Code == "TA",]$TA>0)){QUD[QUD$Code == "TA",]$TA =  1}
QUD$DI = 0
if (length(QUD[QUD$Code == "DI",]$DI>0)){QUD[QUD$Code == "DI",]$DI = 1}
QUD$DA = 0
if (length(QUD[QUD$Code == "DA",]$DA > 0)){QUD[QUD$Code == "DA",]$DA = 1}
QUD = QUD[QUD$Name %in% c( "AC_16",
"AC_17",
"AC_18",
"AC_19",
"AC_20",
"AC_21",
"AC_23",
"AC_24",
"AC_26",
"AC_27",
"AC_29",
"AC_30",
"AC_33",
"AC_34",
"AC_37",
"AC_39",
"AC_40",
"AC_41",
"AC_32",
"AC_43",
"AC_44",
"AC_45",
"AC_46",
"AC_36","SC_02","SC_03","SC_04","SC_05","SC_06","SC_07","SC_08","SC_09","SC_10","SC_11","SC_12","SC_13","SC_14","SC_15","SC_16","SC_17","SC_18","SC_19","SC_20","SC_21","SC_22","SC_23","SC_24","SC_25"),]
QUD$NameTrial = paste(QUD$Name,QUD$Trial, sep = "")
QUD$Name <- QUD$Name[drop=TRUE]
QUD$ExOrd = 1
QUD[QUD$Name %in% c
("AC_32","AC_33","AC_34","AC_36","AC_37","AC_38","AC_39","AC_40","AC_41","AC_42","AC_43","AC_44","AC_45","AC_46","AC_47","SC_14","SC_15","SC_16","SC_17","SC_18","SC_19","SC_20","SC_21","SC_22","SC_23","SC_24","SC_25"),]$ExOrd = 2
QUD$ExOrd = as.factor(QUD$ExOrd)
contrasts(QUD$ExOrd)[1] <- -1
ddply(QUD, .(Name,ItemNo,Cond,Pop,Verb,Prep,NP2,PrepFrame,NP2Frame), plyr::summarize, TimeFrame = c(0:max(TimeFrame))) -> QUD.Expand
QUD.Expand <- merge(QUD,QUD.Expand, by = c("Name","ItemNo","Cond","Pop","TimeFrame","Verb","Prep","NP2","PrepFrame","NP2Frame"), all= TRUE)
QUD.Expand$Inst <- t(imputation(matrix(QUD.Expand$Inst, nrow = 1),method = "locf"))
QUD.Expand$TA <- t(imputation(matrix(QUD.Expand$TA, nrow = 1),method = "locf"))
QUD.Expand$DA <- t(imputation(matrix(QUD.Expand$DA, nrow = 1),method = "locf"))
QUD.Expand$DI <- t(imputation(matrix(QUD.Expand$DI, nrow = 1),method = "locf"))
QUD.Expand <- ddply(QUD.Expand, .(Name,ItemNo), transform, Period = ifelse(TimeFrame >= NP2Frame,"NP2",ifelse(TimeFrame >= PrepFrame,"Prep","Verb")))
QUD.Expand <- ddply(QUD.Expand, .(Name,ItemNo), transform, TimeFrame = TimeFrame - NP2Frame)
QUD.Expand$TimeFrame <- QUD.Expand$TimeFrame* (1000/30)
se <- function(x){
x <- sd(x)/sqrt(24)
return(x)
}
QUD.GCurve <- summaryBy(Inst+TA+DA+DI~TimeFrame+Cond+Name+Pop+ItemNo, data = QUD.Expand[QUD.Expand$TimeFrame >= -300 & QUD.Expand$TimeFrame <=1500,], FUN = c(mean),keep.names = T)
QUD.GCurve$TimeFrame <- round(QUD.GCurve$TimeFrame,-2)
QUD.GCurve <- summaryBy(Inst+TA+DA+DI~TimeFrame+Cond+Name+Pop+ItemNo, data = QUD.GCurve, FUN = c(mean),keep.names = T)
QUD.GCurve$Inst <- ifelse(QUD.GCurve$Inst < 0,1,0)
t<-poly(unique(QUD.GCurve$TimeFrame),2)
time<-as.vector(unique(QUD.GCurve$TimeFrame))
t<-cbind(t,time)
t<-as.data.frame(t)
QUD.GCurve<-QUD.GCurve[order(QUD.GCurve$TimeFrame),]
QUD.GCurve$t1<-NA
QUD.GCurve$t2<-NA
for (i in (1:nrow(QUD.GCurve))){
QUD.GCurve$t1[i]<-t[t$time==QUD.GCurve$TimeFrame[i],1]
QUD.GCurve$t2[i]<-t[t$time==QUD.GCurve$TimeFrame[i],2]
}
contrasts(QUD.GCurve$Cond)[1] <- -1
contrasts(QUD.GCurve$Pop)[1] <- -1
qud.gc.brm.full <- brm(Inst ~1+(t1+t2)*Pop*Cond+(0+(t1+t2)*Cond|Name) + (1+(t1+t2)*Pop*Cond|ItemNo), data=QUD.GCurve, family = "bernoulli", chains = 3, iter = 1000, warmup = 600,prior=c(set_prior ("student_t (6,0, 0.5)")))
summary(qud.gc.brm.full)
qud.gc.brm.full <- brm(Inst ~1+(t1+t2)*Pop*Cond+(0+(t1+t2)*Cond|Name) + (1+(t1+t2)*Pop*Cond|ItemNo), data=QUD.GCurve, family = "bernoulli", chains = 3, iter = 1000, warmup = 600))
summary(qud.gc.brm.full)
qud.gc.brm.full <- brm(Inst ~1+(t1+t2)*Pop*Cond+(0+(t1+t2)*Cond|Name) + (1+(t1+t2)*Pop*Cond|ItemNo), data=QUD.GCurve, family = "bernoulli", chains = 3, iter = 1000, warmup = 600)
setwd("~/GitHub/CFS_Compositionality")
sklar_wide <- read.csv("Sklar_Expt1_Wide.csv")
summary(sklar_wide)
sklar_wide <- read.csv("Sklar_Expt1_Wide.csv")
summary(sklar_wide)
sklar_wide
library(readr)
Slar_Expt1_Wide <- read_csv("~/GitHub/CFS_Compositionality/Slar_Expt1_Wide.csv")
View(Slar_Expt1_Wide)
summary(Slar_Expt1_Wide)
setwd("~/GitHub/CFS_Compositionality")
sklar_wide <- read.csv("Sklar_Expt1_Wide.csv")
summary(sklar_wide)
sklar_wide <- read.csv("Slar_Expt1_Wide")
summary(sklar_wide)
sklar_wide <- read_csv("Slar_Expt1_Wide")
summary(sklar_wide)
sklar_wide <- read_csv("~/GitHub/CFS_Compositionality/Slar_Expt1_Wide")
summary(sklar_wide)
sklar_wide <- read_csv("~/GitHub/CFS_Compositionality/Slar_Expt1_Wide.csv")
sklar_wide <-read_csv("~/GitHub/CFS_Compositionality/Slar_Expt1_Wide.csv")
summary(sklar_wide)
sklar_wide <-read.csv("~/GitHub/CFS_Compositionality/Slar_Expt1_Wide.csv")
summary(sklar_wide)
gather(sklar_wide, Item, rt, paste("X",1:32,sep =""))
paste("X",1:32,sep ="")
a <- gather(sklar_wide, Item, rt, paste("X",1:33,sep =""))
a
?gather
library(tidyr)
a <- gather(sklar_wide, Item, rt, paste("X",1:33,sep =""))
summary(a)
?gather
gather(sklar_wide, Item, rt, paste("X",1:33,sep =""))
summary(sklar_wide)
